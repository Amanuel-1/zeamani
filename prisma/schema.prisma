// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"

    url      = env("DATABASE_URL")
}


// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[] 
    sessions      Session[]
    posts         BlogPost[]
    projects      Project[]
    bookmarks     Bookmark[]
    isGuest       Boolean @default(true)

}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model GuestBook {
    id String @id @default(cuid())
    guestName String
    avatar String
    profileUrl String
    country String
    content String @db.Text
    createdAt DateTime @default(now())
}


model Project {
    id String @id @default(cuid())
    title String @unique
    creatorId String
    coverImage String @db.Text
    description String @db.Text
    likes Int @default(0)
    views Int @default(0)
    demoLink String
    githubLink String
    createdBy User @relation(fields: [creatorId],references: [id],onDelete: Cascade,onUpdate: Cascade)
    tags Tag[]
    categories Category[] 
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    @@index([creatorId,likes,views])

}

model Category {
    id String @id @default(cuid())
    name String @unique
    description String @default("No description about this project Yet")
    rate Int? @default(0)
    projects Project[]
    createdAt DateTime @default(now())

}

model Bookmark {
    id String @id @default(cuid())
    ownerId String
    owner User @relation(fields: [ownerId],references: [id],onDelete: Cascade,onUpdate: Cascade)
    
}


model Tag{
    id String @id @default(cuid())
    name String @unique
    projects Project[]
    posts BlogPost[]
    
    
    
}

// model TagsOnProjects{
//     projectId String
//     tagId String
//     project Project @relation(fields: [projectId],references: [id])
//     tag Tag @relation(fields: [tagId],references: [id])

//     @@unique([projectId,tagId])
// }



// model Categoy{
//     id String @id @default(cuid())
//     name String @unique
//     description String
// }

model BlogPost {
    id String @id @default(cuid())
    authorId String
    title String @unique
    slug String @unique
    description String
    content String @db.Text
    coverImage String @db.Text
    tag Tag[]
    comments Comment[]

    reactions Int[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy User @relation(fields: [authorId],references: [id])

    @@index([slug,title])
}

// model TagsOnPosts{
//     postId String
//     tagId String 
//     post BlogPost @relation(fields: [postId],references: [id])
//     tag  Tag @relation(fields: [tagId],references: [id])

//     @@unique([postId,tagId])
// }

model Comment {
  id        String    @id @default(cuid())
  postId    String?
  commentId String?
  authorid  String

  post          BlogPost?  @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  parentComment Comment?  @relation("childComments", fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  childComments Comment[] @relation("childComments")
}